;; $DOOMDIR/config.el -*- lexical-binding: t; mode: emacs-lisp; -*-
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Font
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14 :weight 'normal))
(setq-default line-spacing 0.15)

;; Catppuccin (from packages.el)
(setq catppuccin-flavor 'mocha
      doom-theme 'catppuccin)

;; Enable hl-mode in certain modes only
(setq global-hl-line-modes '(org-agenda-mode))

;; Set frame to full height and width on startup
(add-to-list 'default-frame-alist '(fullscreen . fullheight))
(add-to-list 'default-frame-alist '(fullscreen . fullwidth))

;; Customize doom-dashboard
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-banner)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)

;; Enable relative line numbers
(setq display-line-numbers-type 'relative)

;; org-mode (TODO: throws an error if the directory does not exist)
(setq hugginsio/org-base-dir "~/Workspaces/Org/"
      hugginsio/current-year (format-time-string "%Y" (current-time))
      hugginsio/current-org-dir (concat hugginsio/org-base-dir hugginsio/current-year "/"))
(make-directory hugginsio/current-org-dir :parents)
(setq org-directory hugginsio/current-org-dir
      org-default-notes-file (concat hugginsio/current-org-dir "notes.org")
      org-agenda-start-day "-3d"
      org-agenda-start-on-weekday nil
      org-agenda-files (directory-files-recursively hugginsio/org-base-dir "\\.org$")
      org-agenda-custom-commands
      '(("f" "Agenda for current fortnight"
	 ((agenda "" ((org-agenda-span 14 org-agenda-start-day "-3d" org-agenda-start-on-weekday nil))))
	 ))
      )

(defun hugginsio/org-mode-headers-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1
		  org-level-2
		  org-level-3
		  org-level-4
		  org-level-5))
    (set-face-attribute face nil :weight 'bold :height 1.0)))
(add-hook 'org-mode-hook #'hugginsio/org-mode-headers-hook)

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("org-plain-latex"
		 "\\documentclass{article}
	   [NO-DEFAULT-PACKAGES]
	   [PACKAGES]
	   [EXTRA]"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

;; vterm
(setq vterm-shell "{{ .fishPath }} -i -l")

;; Projectile
(setq projectile-project-search-path '("~/Workspaces/Org"
				       ("~/Workspaces/Develop" . 1)
				       "~/.local/share/chezmoi"
				       ))

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
