#!/usr/bin/env python
# vim: ft=python

from dataclasses import dataclass
import argparse
import glob
import zklib

parser = argparse.ArgumentParser(
    prog="zk-update-work-items",
    description="Update work item notes items in a given $ZK_NOTEBOOK_DIR with data fetched from `az`.",
)

parser.add_argument(
    "notebook",
    help="Notebook directory from `zk` ($ZK_NOTEBOOK_DIR)",
    type=str,
)

args = parser.parse_args()

workItemDirectory = "%s/work-item/" % args.notebook
filenames = glob.glob("%swi-*.md" % workItemDirectory)


def extractYamlValue(key: str, line: str) -> str:
    value = ""
    value = str.removeprefix(line, key + ":").strip(" \"'[]")
    return value


@dataclass
class FrontmatterItem:
    index: int = 0
    value: str = ""


yamlMarker = "---"
yamlInstallDate = "install-date"
yamlTags = "tags"
yamlWorkItem = "work-item"

# HACK: brute force with strings until I make time to configure python-frontmatter in a way that preserves my formatting
for path in filenames:
    identifier = ""
    installDate = FrontmatterItem()
    state = FrontmatterItem()

    with open(path) as file:
        fileContents = file.readlines()

        marker = 0
        for index, line in enumerate(fileContents):
            line = line.strip()

            if line == yamlMarker:
                marker += 1
            if marker == 2:
                break
            if yamlInstallDate in line:
                installDate = FrontmatterItem(
                    index=index,
                    value=extractYamlValue(yamlInstallDate, line),
                )
            if yamlTags in line:
                tags = extractYamlValue(yamlTags, line)
                state = FrontmatterItem(
                    index=index, value=tags[tags.rfind(" ") :].strip()
                )
            if yamlWorkItem in line:
                identifier = extractYamlValue(yamlWorkItem, line)
        if state.value == "closed":
            break
    workItem = zklib.azGetWorkItem(identifier)
    modifyInstallDate = installDate.value != workItem.installDate
    modifyState = state.value != workItem.state

    if modifyInstallDate:
        fileContents[installDate.index] = fileContents[installDate.index].replace(
            installDate.value, workItem.installDate
        )

    if modifyState:
        fileContents[state.index] = fileContents[state.index].replace(
            state.value, workItem.state
        )

    if modifyState or modifyInstallDate:
        print("Updating work item {}".format(identifier))
        with open(path, "w") as file:
            file.writelines(fileContents)
print("All work items up to date.")
